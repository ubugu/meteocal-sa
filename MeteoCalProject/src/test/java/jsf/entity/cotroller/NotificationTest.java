/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jsf.entity.cotroller;

import java.util.Date;
import jsf.entity.Calendar;
import jsf.entity.Event;
import jsf.entity.Notification;
import jsf.entity.User;
import jsf.entity.facade.NotificationFacade;
import jsf.entity.facade.UserFacade;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
 *
 * @author Walter
 */
public class NotificationTest {
     
    private NotificationsController notificationController;
    
    private Notification notification;
    
    private User user;
    
    private Event event;
    
    private Calendar calendar;
    
    private Date futureDate,startTime,endTime;
    
    @Before
    public void setUp() {
        notificationController = new NotificationsController();
        notificationController.facade = mock(NotificationFacade.class);
        notificationController.userFacade = mock(UserFacade.class);
       
        futureDate = new DateTime(2100,1,1,12,00).toDate();
        startTime = new DateTime(2100,1,1,14,00).toDate();
        endTime = new DateTime(2100,1,1,18,00).toDate();
        
        notification = new Notification();
        user = new User();
        
        event = new Event();
        event.setId(1);
        event.setTitle("test");
        event.setLocation("testinglocation");
        event.setDate(futureDate);
        event.setStartingTime(startTime);
        event.setEndingTime(endTime);
        event.setWeatherID(null);
        
        
        user = new User();
        user.setUsername("testname");
        user.setPassword("testpass");
        user.setGroupName("USERS");
        
        calendar = new Calendar();
        calendar.setOwner(user);
        calendar.setPrivacy("PUBLIC");
        
    }

    @Test
    public void isCorrectlyVisualizedTest(){
        notification.setEventID(event);
        notification.setUser(user);
        notification.setType("INVITED");
        notification.setVisualized("NO");
        
        assertTrue(notificationController.isVisualized(notification).equals("none"));
        assertTrue(notificationController.isNotVisualized(notification).equals("display"));
    }

    //exception generated by the dialog 
    @Test(expected=NullPointerException.class)
    public void eventIsNull(){
        
        notification.setEventID(null);
        notification.setUser(user);
        notification.setType("INVITED");
        notification.setVisualized("NO");
        ShowEventController ev = mock(ShowEventController.class);
        
        try{
            notificationController.setSelectedNotification(notification);
        }catch(NullPointerException e){
            notificationController.setEventController(ev);
            assertSame(notificationController.showEvent(),"/showEvent?faces-redirect=true");
        }
        
    }
    
    @Test
    public void showEventWithoutWeather(){
        
        notification.setEventID(event);
        notification.setUser(user);
        notification.setType("INVITED");
        notification.setVisualized("NO");
        ShowEventController ev = mock(ShowEventController.class);
        
        try{
            notificationController.setSelectedNotification(notification);
        }catch(NullPointerException e){          
            verify(notificationController.facade,times(1)).edit(notification);            
            notificationController.setEventController(ev);
            assertSame(notificationController.showEvent(),"/showEvent?faces-redirect=true");
        }
        
    }

    @Test
    public void hasEventTest(){
        
        notification.setEventID(event);
        notification.setUser(user);
        notification.setType("INVITED");
        notification.setVisualized("NO");
        ShowEventController ev = mock(ShowEventController.class);
        
        try{
            notificationController.setSelectedNotification(notification);
        }catch(NullPointerException e){          
            verify(notificationController.facade,times(1)).edit(notification);
            assertSame(notificationController.hasEvent(),"display");
                try{
                    notificationController.setSelectedNotification(null);
                }catch(NullPointerException e2){
                    assertSame(notificationController.hasEvent(),"none");
                    try{
                        notification.setEventID(null);
                        notificationController.setSelectedNotification(notification);
                    }catch(NullPointerException e3){
                        assertSame(notificationController.hasEvent(),"none");
                    }          
        
                }          
        
        }
        
    }
    
}
